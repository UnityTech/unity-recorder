{
  "api/UnityEditor.Recorder.Input.SuperSamplingCount.html": {
    "href": "api/UnityEditor.Recorder.Input.SuperSamplingCount.html",
    "title": "Enum SuperSamplingCount | Package Manager UI website",
    "keywords": "Enum SuperSamplingCount Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum SuperSamplingCount Fields Name Description X1 X16 X2 X4 X8"
  },
  "api/UnityEditor.Recorder.RecorderWindow.html": {
    "href": "api/UnityEditor.Recorder.RecorderWindow.html",
    "title": "Class RecorderWindow | Package Manager UI website",
    "keywords": "Class RecorderWindow Main window class of the Unity Recorder. It can be accessed from an Editor script to show the Recorder Window and eventually Start and Stop the recording using current settings. Recorder settings are saved in Library/Recorder/recorder.pref Inheritance System.Object RecorderWindow Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class RecorderWindow : EditorWindow Methods IsRecording() Used to get the current state of the recording. Declaration public bool IsRecording() Returns Type Description System.Boolean True if the Recorder is started or being started. False otherwise. StartRecording() Used to Start the recording with current settings. If not already the case, the Editor will also switch to PlayMode. Declaration public void StartRecording() StopRecording() Used to Stop current recordings if any. Exiting PlayMode while the Recorder is recording will automatically Stop the recorder. Declaration public void StopRecording()"
  },
  "api/UnityEditor.Recorder.FrameCapturer.html": {
    "href": "api/UnityEditor.Recorder.FrameCapturer.html",
    "title": "Namespace UnityEditor.Recorder.FrameCapturer | Package Manager UI website",
    "keywords": "Namespace UnityEditor.Recorder.FrameCapturer Classes BaseFCRecorderSettings"
  },
  "api/UnityEditor.Recorder.ImageSource.html": {
    "href": "api/UnityEditor.Recorder.ImageSource.html",
    "title": "Enum ImageSource | Package Manager UI website",
    "keywords": "Enum ImageSource A list of possible image source that can be used by some image specific recorders Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum ImageSource Fields Name Description ActiveCamera MainCamera TaggedCamera"
  },
  "api/UnityEditor.Recorder.Input.RenderTextureSamplerSettings.html": {
    "href": "api/UnityEditor.Recorder.Input.RenderTextureSamplerSettings.html",
    "title": "Class RenderTextureSamplerSettings | Package Manager UI website",
    "keywords": "Class RenderTextureSamplerSettings Inheritance System.Object RecorderInputSettings ImageInputSettings StandardImageInputSettings RenderTextureSamplerSettings Inherited Members StandardImageInputSettings.outputHeight StandardImageInputSettings.outputAspect StandardImageInputSettings.resolution ImageInputSettings.supportsTransparent ImageInputSettings.allowTransparency System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class RenderTextureSamplerSettings : StandardImageInputSettings Fields cameraTag Declaration public string cameraTag Field Value Type Description System.String colorSpace Declaration public ColorSpace colorSpace Field Value Type Description ColorSpace flipFinalOutput Declaration public bool flipFinalOutput Field Value Type Description System.Boolean renderSize Declaration public ImageHeight renderSize Field Value Type Description ImageHeight source Declaration public ImageSource source Field Value Type Description ImageSource superKernelPower Declaration public float superKernelPower Field Value Type Description System.Single superKernelScale Declaration public float superKernelScale Field Value Type Description System.Single superSampling Declaration public SuperSamplingCount superSampling Field Value Type Description SuperSamplingCount"
  },
  "api/UnityEditor.Recorder.Input.AudioInputSettings.html": {
    "href": "api/UnityEditor.Recorder.Input.AudioInputSettings.html",
    "title": "Class AudioInputSettings | Package Manager UI website",
    "keywords": "Class AudioInputSettings Inheritance System.Object RecorderInputSettings AudioInputSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class AudioInputSettings : RecorderInputSettings Fields preserveAudio Declaration public bool preserveAudio Field Value Type Description System.Boolean"
  },
  "api/UnityEditor.Recorder.Input.StandardImageInputSettings.html": {
    "href": "api/UnityEditor.Recorder.Input.StandardImageInputSettings.html",
    "title": "Class StandardImageInputSettings | Package Manager UI website",
    "keywords": "Class StandardImageInputSettings Regroups settings needed to specify the size of an Image input using a size and an aspect ratio Inheritance System.Object RecorderInputSettings ImageInputSettings StandardImageInputSettings CameraInputSettings GameViewInputSettings RenderTextureSamplerSettings Inherited Members ImageInputSettings.supportsTransparent ImageInputSettings.allowTransparency System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public abstract class StandardImageInputSettings : ImageInputSettings Constructors StandardImageInputSettings() Declaration protected StandardImageInputSettings() Fields outputAspect Declaration public ImageAspect outputAspect Field Value Type Description ImageAspect outputHeight Declaration public ImageHeight outputHeight Field Value Type Description ImageHeight Properties resolution Declaration public override Vector2 resolution { get; } Property Value Type Description Vector2 Overrides ImageInputSettings.resolution"
  },
  "api/UnityEditor.Recorder.RecorderSettings.html": {
    "href": "api/UnityEditor.Recorder.RecorderSettings.html",
    "title": "Class RecorderSettings | Package Manager UI website",
    "keywords": "Class RecorderSettings Main base class for a Recorder settings. Each recorder needs to have its corresponding settings properly configured. Inheritance System.Object RecorderSettings AnimationRecorderSettings BaseFCRecorderSettings ImageRecorderSettings MovieRecorderSettings Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public abstract class RecorderSettings : ScriptableObject Constructors RecorderSettings() Declaration protected RecorderSettings() Fields enabled Used only when starting the recording. If false, this recorder will be ignored. Declaration public bool enabled Field Value Type Description System.Boolean take Current Take number. Automatically incremented after each recording session. Declaration public int take Field Value Type Description System.Int32 Properties extension The extension used by this recorder without the dot. Declaration public abstract string extension { get; } Property Value Type Description System.String inputsSettings List of Input settings required by this recorder. Declaration public abstract IEnumerable<RecorderInputSettings> inputsSettings { get; } Property Value Type Description IEnumerable < RecorderInputSettings > isPlatformSupported Virtual method that can be used to return false if current platform is not supported. Declaration public virtual bool isPlatformSupported { get; } Property Value Type Description System.Boolean outputFile The output path this recorder will use to generate it's output file. File extension is automatically added. It can be either an absolute or relative path. Wildcards like DefaultWildcard.Time are supported. DefaultWildcard Declaration public string outputFile { get; set; } Property Value Type Description System.String Methods OnAfterDuplicate() Override this method if any post treatement need to be done after a this recorder is duplicated in the RecorderWindow Declaration public virtual void OnAfterDuplicate() SelfAdjustSettings() Called each time a settings has changed in the RecorderWindow and before starting recording. Declaration public virtual void SelfAdjustSettings()"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Package Manager UI website",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "api/UnityEditor.Recorder.Options.html": {
    "href": "api/UnityEditor.Recorder.Options.html",
    "title": "Class Options | Package Manager UI website",
    "keywords": "Class Options Options class for the Recorder Inheritance System.Object Options Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class Options Properties showLegacyRecorders If true, legacy recorders will be displayed in the \"Add New Recorder\" menu. Legacy recorders are deprecated and will be removed from the Unity Recorder in future releases. Declaration public static bool showLegacyRecorders { get; set; } Property Value Type Description System.Boolean showRecorderGameObject The recoder uses a \"Unity-Recorder\" GameObject to store Scene references and manage recording sessions. If true, this GameObject will be visible in the Scene Hierarchy. Declaration public static bool showRecorderGameObject { get; set; } Property Value Type Description System.Boolean verboseMode If true, the recorder will log additional recording steps into the Console. Declaration public static bool verboseMode { get; set; } Property Value Type Description System.Boolean"
  },
  "api/UnityEditor.Recorder.ImageHeight.html": {
    "href": "api/UnityEditor.Recorder.ImageHeight.html",
    "title": "Enum ImageHeight | Package Manager UI website",
    "keywords": "Enum ImageHeight Helper to describe a standard image height. Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum ImageHeight Fields Name Description Window x1080p_FHD x1440p_QHD x2160p_4K x240p x2880p_5K x4320p_8K x480p x720p_HD"
  },
  "api/UnityEditor.Recorder.Input.RenderTextureInputSettings.html": {
    "href": "api/UnityEditor.Recorder.Input.RenderTextureInputSettings.html",
    "title": "Class RenderTextureInputSettings | Package Manager UI website",
    "keywords": "Class RenderTextureInputSettings Inheritance System.Object RecorderInputSettings ImageInputSettings RenderTextureInputSettings Inherited Members ImageInputSettings.supportsTransparent ImageInputSettings.allowTransparency System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class RenderTextureInputSettings : ImageInputSettings Fields renderTexture Declaration public RenderTexture renderTexture Field Value Type Description RenderTexture Properties resolution Declaration public override Vector2 resolution { get; } Property Value Type Description Vector2 Overrides ImageInputSettings.resolution"
  },
  "api/UnityEngine.Recorder.html": {
    "href": "api/UnityEngine.Recorder.html",
    "title": "Namespace UnityEngine.Recorder | Package Manager UI website",
    "keywords": "Namespace UnityEngine.Recorder Classes RecorderBindings Helper component mainly used to save Recorder's GameObject references. Some recorders (like the Animation Recorder) requires a GameObject reference from a Scene to record from. In this cases, this component is automatically added to the Scene and binds the selected GameObject to the recorder settings."
  },
  "api/UnityEditor.Recorder.GIFRecorderSettings.html": {
    "href": "api/UnityEditor.Recorder.GIFRecorderSettings.html",
    "title": "Class GIFRecorderSettings | Package Manager UI website",
    "keywords": "Class GIFRecorderSettings Inheritance System.Object GIFRecorderSettings Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class GIFRecorderSettings : BaseFCRecorderSettings Constructors GIFRecorderSettings() Declaration public GIFRecorderSettings() Properties extension Declaration public override string extension { get; } Property Value Type Description System.String keyframeInterval Declaration public int keyframeInterval { get; set; } Property Value Type Description System.Int32 maxTasks Declaration public int maxTasks { get; set; } Property Value Type Description System.Int32 numColors Declaration public int numColors { get; set; } Property Value Type Description System.Int32"
  },
  "api/UnityEditor.Recorder.Input.CameraInputSettings.html": {
    "href": "api/UnityEditor.Recorder.Input.CameraInputSettings.html",
    "title": "Class CameraInputSettings | Package Manager UI website",
    "keywords": "Class CameraInputSettings Inheritance System.Object RecorderInputSettings ImageInputSettings StandardImageInputSettings CameraInputSettings Inherited Members StandardImageInputSettings.outputHeight StandardImageInputSettings.outputAspect StandardImageInputSettings.resolution ImageInputSettings.supportsTransparent ImageInputSettings.allowTransparency System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class CameraInputSettings : StandardImageInputSettings Constructors CameraInputSettings() Declaration public CameraInputSettings() Fields cameraTag Declaration public string cameraTag Field Value Type Description System.String captureUI Declaration public bool captureUI Field Value Type Description System.Boolean flipFinalOutput Declaration public bool flipFinalOutput Field Value Type Description System.Boolean source Declaration public ImageSource source Field Value Type Description ImageSource"
  },
  "api/UnityEditor.Recorder.Input.html": {
    "href": "api/UnityEditor.Recorder.Input.html",
    "title": "Namespace UnityEditor.Recorder.Input | Package Manager UI website",
    "keywords": "Namespace UnityEditor.Recorder.Input Classes AnimationInputSettings Regroups all the information required to record an Animation from a given gameObject. AudioInputSettings CameraInputSettings GameViewInputSettings ImageInputSettings Optional base class for Image related inputs. RenderTextureInputSettings RenderTextureSamplerSettings StandardImageInputSettings Regroups settings needed to specify the size of an Image input using a size and an aspect ratio Enums SuperSamplingCount"
  },
  "api/UnityEditor.Recorder.Timeline.RecorderTrack.html": {
    "href": "api/UnityEditor.Recorder.Timeline.RecorderTrack.html",
    "title": "Class RecorderTrack | Package Manager UI website",
    "keywords": "Class RecorderTrack Inheritance System.Object RecorderTrack Namespace : UnityEditor.Recorder.Timeline <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class RecorderTrack : TrackAsset"
  },
  "api/UnityEditor.Recorder.DefaultWildcard.html": {
    "href": "api/UnityEditor.Recorder.DefaultWildcard.html",
    "title": "Class DefaultWildcard | Package Manager UI website",
    "keywords": "Class DefaultWildcard Helper class for default wildcards that can be used when constructing the output file of a recorder. outputFile Inheritance System.Object DefaultWildcard Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class DefaultWildcard Fields Date Declaration public static readonly string Date Field Value Type Description System.String Extension Declaration public static readonly string Extension Field Value Type Description System.String Frame Declaration public static readonly string Frame Field Value Type Description System.String Product Declaration public static readonly string Product Field Value Type Description System.String Project Declaration public static readonly string Project Field Value Type Description System.String Recorder Declaration public static readonly string Recorder Field Value Type Description System.String Resolution Declaration public static readonly string Resolution Field Value Type Description System.String Scene Declaration public static readonly string Scene Field Value Type Description System.String Take Declaration public static readonly string Take Field Value Type Description System.String Time Declaration public static readonly string Time Field Value Type Description System.String Methods GeneratePattern(String) Declaration public static string GeneratePattern(string tag) Parameters Type Name Description System.String tag Returns Type Description System.String"
  },
  "api/UnityEditor.Recorder.ImageRecorderOutputFormat.html": {
    "href": "api/UnityEditor.Recorder.ImageRecorderOutputFormat.html",
    "title": "Enum ImageRecorderOutputFormat | Package Manager UI website",
    "keywords": "Enum ImageRecorderOutputFormat Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum ImageRecorderOutputFormat Fields Name Description EXR JPEG PNG"
  },
  "api/UnityEditor.Recorder.Input.GameViewInputSettings.html": {
    "href": "api/UnityEditor.Recorder.Input.GameViewInputSettings.html",
    "title": "Class GameViewInputSettings | Package Manager UI website",
    "keywords": "Class GameViewInputSettings Inheritance System.Object RecorderInputSettings ImageInputSettings StandardImageInputSettings GameViewInputSettings Inherited Members StandardImageInputSettings.outputHeight StandardImageInputSettings.outputAspect StandardImageInputSettings.resolution ImageInputSettings.allowTransparency System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class GameViewInputSettings : StandardImageInputSettings Constructors GameViewInputSettings() Declaration public GameViewInputSettings() Properties supportsTransparent Declaration public override bool supportsTransparent { get; } Property Value Type Description System.Boolean Overrides ImageInputSettings.supportsTransparent"
  },
  "api/UnityEditor.Recorder.MovieRecorderSettings.html": {
    "href": "api/UnityEditor.Recorder.MovieRecorderSettings.html",
    "title": "Class MovieRecorderSettings | Package Manager UI website",
    "keywords": "Class MovieRecorderSettings Inheritance System.Object RecorderSettings MovieRecorderSettings Inherited Members RecorderSettings.outputFile RecorderSettings.enabled RecorderSettings.take RecorderSettings.isPlatformSupported RecorderSettings.OnAfterDuplicate() Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class MovieRecorderSettings : RecorderSettings Constructors MovieRecorderSettings() Declaration public MovieRecorderSettings() Fields captureAlpha Declaration public bool captureAlpha Field Value Type Description System.Boolean outputFormat Declaration public VideoRecorderOutputFormat outputFormat Field Value Type Description VideoRecorderOutputFormat videoBitRateMode Declaration public VideoBitrateMode videoBitRateMode Field Value Type Description VideoBitrateMode Properties audioInputSettings Declaration public AudioInputSettings audioInputSettings { get; } Property Value Type Description AudioInputSettings extension Declaration public override string extension { get; } Property Value Type Description System.String Overrides RecorderSettings.extension imageInputSettings Declaration public ImageInputSettings imageInputSettings { get; set; } Property Value Type Description ImageInputSettings inputsSettings Declaration public override IEnumerable<RecorderInputSettings> inputsSettings { get; } Property Value Type Description IEnumerable < RecorderInputSettings > Overrides RecorderSettings.inputsSettings Methods SelfAdjustSettings() Declaration public override void SelfAdjustSettings() Overrides RecorderSettings.SelfAdjustSettings()"
  },
  "api/UnityEditor.Recorder.Timeline.RecorderClip.html": {
    "href": "api/UnityEditor.Recorder.Timeline.RecorderClip.html",
    "title": "Class RecorderClip | Package Manager UI website",
    "keywords": "Class RecorderClip Inheritance System.Object RecorderClip Namespace : UnityEditor.Recorder.Timeline <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class RecorderClip : PlayableAsset, ITimelineClipAsset Fields settings Declaration public RecorderSettings settings Field Value Type Description RecorderSettings Properties clipCaps Declaration public ClipCaps clipCaps { get; } Property Value Type Description ClipCaps Methods CreatePlayable(PlayableGraph, GameObject) Declaration public override Playable CreatePlayable(PlayableGraph graph, GameObject owner) Parameters Type Name Description PlayableGraph graph GameObject owner Returns Type Description Playable OnDestroy() Declaration public void OnDestroy()"
  },
  "api/UnityEditor.Recorder.FrameCapturer.BaseFCRecorderSettings.html": {
    "href": "api/UnityEditor.Recorder.FrameCapturer.BaseFCRecorderSettings.html",
    "title": "Class BaseFCRecorderSettings | Package Manager UI website",
    "keywords": "Class BaseFCRecorderSettings Inheritance System.Object RecorderSettings BaseFCRecorderSettings Inherited Members RecorderSettings.outputFile RecorderSettings.enabled RecorderSettings.take RecorderSettings.extension RecorderSettings.SelfAdjustSettings() RecorderSettings.OnAfterDuplicate() Namespace : UnityEditor.Recorder.FrameCapturer <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public abstract class BaseFCRecorderSettings : RecorderSettings Properties imageInputSettings Declaration public ImageInputSettings imageInputSettings { get; set; } Property Value Type Description ImageInputSettings inputsSettings Declaration public override IEnumerable<RecorderInputSettings> inputsSettings { get; } Property Value Type Description IEnumerable < RecorderInputSettings > Overrides RecorderSettings.inputsSettings isPlatformSupported Declaration public override bool isPlatformSupported { get; } Property Value Type Description System.Boolean Overrides RecorderSettings.isPlatformSupported"
  },
  "api/UnityEditor.Recorder.Examples.RecorderEditorExample.html": {
    "href": "api/UnityEditor.Recorder.Examples.RecorderEditorExample.html",
    "title": "Class RecorderEditorExample | Package Manager UI website",
    "keywords": "Class RecorderEditorExample Inheritance System.Object RecorderEditorExample Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Examples <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class RecorderEditorExample"
  },
  "api/UnityEditor.Recorder.html": {
    "href": "api/UnityEditor.Recorder.html",
    "title": "Namespace UnityEditor.Recorder | Package Manager UI website",
    "keywords": "Namespace UnityEditor.Recorder Classes AnimationRecorderSettings DefaultWildcard Helper class for default wildcards that can be used when constructing the output file of a recorder. outputFile GIFRecorderSettings ImageRecorderSettings MovieRecorderSettings Options Options class for the Recorder RecorderController Main class to use the Recorder framework via script. Controls recording states like start and stop. RecorderControllerSettings RecorderInputSettings Base class that represents a RecorderSetting Input that can be recorded from. (like a Camera, a RenderTexture...) RecorderSettings Main base class for a Recorder settings. Each recorder needs to have its corresponding settings properly configured. RecorderWindow Main window class of the Unity Recorder. It can be accessed from an Editor script to show the Recorder Window and eventually Start and Stop the recording using current settings. Recorder settings are saved in Library/Recorder/recorder.pref Enums FrameRatePlayback Type of frame rate the recorder is using. ImageAspect Helper to describe a standard image aspect ratio. ImageHeight Helper to describe a standard image height. ImageRecorderOutputFormat ImageSource A list of possible image source that can be used by some image specific recorders VideoRecorderOutputFormat"
  },
  "api/UnityEditor.Recorder.AnimationRecorderSettings.html": {
    "href": "api/UnityEditor.Recorder.AnimationRecorderSettings.html",
    "title": "Class AnimationRecorderSettings | Package Manager UI website",
    "keywords": "Class AnimationRecorderSettings Inheritance System.Object RecorderSettings AnimationRecorderSettings Inherited Members RecorderSettings.outputFile RecorderSettings.enabled RecorderSettings.take RecorderSettings.SelfAdjustSettings() Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class AnimationRecorderSettings : RecorderSettings Constructors AnimationRecorderSettings() Declaration public AnimationRecorderSettings() Properties animationInputSettings Declaration public AnimationInputSettings animationInputSettings { get; set; } Property Value Type Description AnimationInputSettings extension Declaration public override string extension { get; } Property Value Type Description System.String Overrides RecorderSettings.extension inputsSettings Declaration public override IEnumerable<RecorderInputSettings> inputsSettings { get; } Property Value Type Description IEnumerable < RecorderInputSettings > Overrides RecorderSettings.inputsSettings isPlatformSupported Declaration public override bool isPlatformSupported { get; } Property Value Type Description System.Boolean Overrides RecorderSettings.isPlatformSupported Methods OnAfterDuplicate() Declaration public override void OnAfterDuplicate() Overrides RecorderSettings.OnAfterDuplicate()"
  },
  "api/UnityEditor.Recorder.RecorderInputSettings.html": {
    "href": "api/UnityEditor.Recorder.RecorderInputSettings.html",
    "title": "Class RecorderInputSettings | Package Manager UI website",
    "keywords": "Class RecorderInputSettings Base class that represents a RecorderSetting Input that can be recorded from. (like a Camera, a RenderTexture...) Inheritance System.Object RecorderInputSettings AnimationInputSettings AudioInputSettings ImageInputSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public abstract class RecorderInputSettings"
  },
  "api/UnityEngine.Recorder.RecorderBindings.html": {
    "href": "api/UnityEngine.Recorder.RecorderBindings.html",
    "title": "Class RecorderBindings | Package Manager UI website",
    "keywords": "Class RecorderBindings Helper component mainly used to save Recorder's GameObject references. Some recorders (like the Animation Recorder) requires a GameObject reference from a Scene to record from. In this cases, this component is automatically added to the Scene and binds the selected GameObject to the recorder settings. Inheritance System.Object RecorderBindings Namespace : UnityEngine.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class RecorderBindings : MonoBehaviour Methods DuplicateBinding(String, String) Declaration public void DuplicateBinding(string src, string dst) Parameters Type Name Description System.String src System.String dst GetBindingValue(String) Declaration public UnityObject GetBindingValue(string id) Parameters Type Name Description System.String id Returns Type Description UnityObject RemoveBinding(String) Declaration public void RemoveBinding(string id) Parameters Type Name Description System.String id SetBindingValue(String, UnityObject) Declaration public void SetBindingValue(string id, UnityObject value) Parameters Type Name Description System.String id UnityObject value"
  },
  "api/UnityEditor.Recorder.Examples.html": {
    "href": "api/UnityEditor.Recorder.Examples.html",
    "title": "Namespace UnityEditor.Recorder.Examples | Package Manager UI website",
    "keywords": "Namespace UnityEditor.Recorder.Examples Classes RecorderEditorExample"
  },
  "api/UnityEditor.Recorder.FrameRatePlayback.html": {
    "href": "api/UnityEditor.Recorder.FrameRatePlayback.html",
    "title": "Enum FrameRatePlayback | Package Manager UI website",
    "keywords": "Enum FrameRatePlayback Type of frame rate the recorder is using. Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum FrameRatePlayback Fields Name Description Constant Will not vary during the recording, even if the actual frame rate is lower or higher Variable May vary during the recording. Not supported by all recorders"
  },
  "api/UnityEditor.Recorder.RecorderControllerSettings.html": {
    "href": "api/UnityEditor.Recorder.RecorderControllerSettings.html",
    "title": "Class RecorderControllerSettings | Package Manager UI website",
    "keywords": "Class RecorderControllerSettings Inheritance System.Object RecorderControllerSettings Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class RecorderControllerSettings : ScriptableObject Properties capFrameRate Declaration public bool capFrameRate { get; set; } Property Value Type Description System.Boolean frameRate Declaration public float frameRate { get; set; } Property Value Type Description System.Single frameRatePlayback Declaration public FrameRatePlayback frameRatePlayback { get; set; } Property Value Type Description FrameRatePlayback recorderSettings Declaration public IEnumerable<RecorderSettings> recorderSettings { get; } Property Value Type Description IEnumerable < RecorderSettings > Methods AddRecorderSettings(RecorderSettings) Declaration public void AddRecorderSettings(RecorderSettings recorder) Parameters Type Name Description RecorderSettings recorder LoadOrCreate(String) Declaration public static RecorderControllerSettings LoadOrCreate(string path) Parameters Type Name Description System.String path Returns Type Description RecorderControllerSettings RemoveRecorder(RecorderSettings) Declaration public void RemoveRecorder(RecorderSettings recorder) Parameters Type Name Description RecorderSettings recorder Save() Declaration public void Save() SetRecordModeToFrameInterval(Int32, Int32) Declaration public void SetRecordModeToFrameInterval(int startFrame, int endFrame) Parameters Type Name Description System.Int32 startFrame System.Int32 endFrame SetRecordModeToManual() Declaration public void SetRecordModeToManual() SetRecordModeToSingleFrame(Int32) Declaration public void SetRecordModeToSingleFrame(int frameNumber) Parameters Type Name Description System.Int32 frameNumber SetRecordModeToTimeInterval(Single, Single) Declaration public void SetRecordModeToTimeInterval(float startTime, float endTime) Parameters Type Name Description System.Single startTime System.Single endTime"
  },
  "api/UnityEditor.Recorder.VideoRecorderOutputFormat.html": {
    "href": "api/UnityEditor.Recorder.VideoRecorderOutputFormat.html",
    "title": "Enum VideoRecorderOutputFormat | Package Manager UI website",
    "keywords": "Enum VideoRecorderOutputFormat Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum VideoRecorderOutputFormat Fields Name Description MP4 WEBM"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home Page. | Package Manager UI website",
    "keywords": "Home Page. This is the home page for this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Package Manager UI website",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . [0.2.0] - 2018-05-30 First release of the Unity Recorder . This is mainly a UX revamp of the Asset Store's Media Recorder. Main improvement is the ability to have multiple recorders in parallel."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Unity Recorder V1.0 User Manual | Package Manager UI website",
    "keywords": "Unity Recorder V1.0 User Manual Use the Unity Recorder to capture and save in-game data during Play Mode . For example, use the Unity Recorder to capture and save gameplay as an MP4 file. A recorder specifies details for creating a recording, including a data source, resolution, and output format. The Unity Recorder package includes the following recorders: Animation Recorder : generates an animation clip in ANIM format. Movie Recorder : generates a video in MP4 or WebM format. Image Recorder : generates a sequence of image files in JPEG, PNG, or OpenEXR format. GIF Recorder : generates an animated GIF file. The Unity Recorder also supports Timeline . Use Recorder tracks and clips to trigger recording sessions from Timeline instances. Limitations The Unity Recorder has the following limitations: The Recorder window and Recorder properties are not available in standalone Unity Players. To use Unity Recorder with Scriptable Render Pipeline (SRP) or High Definition Render Pipeline (HDRP), use only the Game View , 360 View , or Render Texture choices in the Capture drop-down menu. The Animation Recorder only records a GameObject in the current Scene. It does not record a GameObject in other scenes. The Movie Recorder does not support variable frame rates. The Unity Recorder does not capture frames at a consistent rate from systems that use a real-time clock, like the Video Player . Data captured from these systems might appear speeded up or slowed down. Upgrading Unity Recorder Besides new features, Unity Recorder 1.0 has a few notable changes: Use the Window > General > Recorder menu to access Unity Recorder features. Features for older versions of Unity Recorder were accessible from the Window > Recorder menu. Unity Recorder includes new, updated recorders. These recorders take advantage of Unity Editor features and are more stable than previous versions. However, if you must use the legacy recorders, toggle Window > General > Recorder > Options > Show Legacy Recorders . To upgrade to Unity Recorder 1.0 from an earlier version: In Unity Editor, open your Unity Project. Save the current Scene. In the Project window, expand the Unity Technologies folder and select the Recorder folder. In the main menu, choose Edit > Delete . Quit Unity then re-open your project. Use the Unity Asset Store to search for and install Unity Recorder 1.0. Setting up Recorders Use the recorder list in the Recorder window to add, rename, edit, duplicate, and delete recorders. You can also save and delete your recorder list as an asset to reuse in your project and in other projects. Tip: You can save a recorder as a Preset . You can also specify a preset for recorder settings as a default when creating new recorders. Re-opening the Recorder window restores the values of the last recording session. To add a recorder: Open the Recorder from the Unity menu ( Window > General > Recorder ). In the recorder list, click + Add New Recorders to choose from a drop-down menu. Adjust the settings for the new recorder. Optionally rename the new recorder by single-clicking its name. To delete or duplicate a recorder: Open the Recorder from the Unity menu ( Windows > General > Recorder ). In the recorder list, right-click the recorder and choose Delete or Duplicate . Tip: You can also delete and duplicate recorders with the Delete and Ctrl+D/Cmd+D keys, respectively. To save, load, or clear settings for all recorders: Open the Recorder window from the Unity menu ( Windows > General > Recorder ). In the recorder list, click the drop-down menu. Do one of the following: To save your recorder list as an asset, choose Save Recorder List . To load a recorder list, choose Load Recorder List , then the list to load. To delete all recorders in your list, choose Clear Recorder List . Recording in Play Mode When recording in Play Mode, use the Record Mode property to specify when to start and stop the recording. You can manually start and stop recording, specify a single frame, a range of frames, or a range of time. You can set up more than one recorder to record the same Scene. Note: During recording, you cannot modify the properties in the Recorder window. To record a scene in Play Mode: Set up your scene to prepare it for recording. Open the Recorder from the Unity menu ( Window > General > Recorder ). In the recorder list, select then set up the recorder to use. Set the Record Mode and Frame Rate properties. Repeat steps 3-4 to use other recorders for the same Scene. Click Start Recording or press F10. Unity Recorder activates Play Mode if it is not already active. The progress bar displays the number of frames or images recorded. When you are ready to stop recording, click Stop Recording or press F10. You only need to stop recording when using the Manual record mode. Your game continues in Play Mode. Tip: Closing the Recorder window, or exiting Play Mode and returning to Edit Mode, also stops the recording. Recording from a Timeline track You can start and stop recordings from the Timeline . A Recorder Track in Timeline contains one or more Recorder Clips . Each clip specifies a recording to start and stop while Timeline plays the Recorder Track . A Recorder Clip has the same properties as a recorder in the Recorder window except for the following differences: Recording mode can only be set to Constant. Timeline can only play using a constant frame rate. The frame rate of the recording inherits from the Timeline’s Frame Rate setting. The Clip Timing section replaces the Bounds/Limits section. Instead, use the Start , End , and Duration properties to set when recording occurs. Use the Recorder Category property to select which recorder the Timeline clip uses. The Recorder Clip properties are stored in the Timeline Track and do not affect the properties in the Recorder window. To set up a recording session in a Timeline instance: Select the GameObject in your Scene that is associated with the Timeline Asset. In the Timeline window, click Add and select Recorder Track . Right-click the Recorder Track and select Add Recorder Clip . Select the Recorder Clip to view and edit its recording properties in the Inspector window. Debugging Recorders You can view the GameObject that Unity Recorder creates in your Scene. This GameObject is named Unity-Recorder . It contains the components and child GameObjects that the Unity Recorder creates to maintain bindings between the Recorder and the GameObjects in your Scene. Also, while recording, the Unity-Recorder GameObject contains components that store the progress of current recording session. Unity-Recorder is normally hidden from the Hierarchy window. To toggle the visibility of the Unity-Recorder , choose Window > General > Recorder > Options > Show Recorder GameObject . Recorder Window Manage recorders and control recording in the Recorder window. The Recorder window has these sections: Recording controls: Start and stop recordings, and specify their duration and frame rate. Recorder list: the recorders you have added or loaded. Recorder properties: Specify the recording properties, such as the output format and encoding, file name and location. Recording controls Use the recording controls to start and stop a recording. Specify when to start and stop a recording with the Record Mode properties. Use the Frame Rate properties to specify how to constrain the frame rate during recording. The frame rate affects the size and number of the captured output files. Property: Function: Start Recording Stop Recording Starts and stops recording. Clicking Start Recording also activates Play Mode if it is not already active. Record Mode Specifies the frames or time duration to record. Manual Start and stop recording when you manually click Start Recording and Stop Recording , respectively. Single Frame Record a single frame. Use the Frame Number property to specify this frame. Frame Interval Record a consecutive set of frames during Play Mode. Use the First Frame and Last Frame properties to specify when to start and stop. Time Interval Record a specific duration during Play Mode. Use the Start and End properties to specify when to start and stop. Frame Number Specifies the number of the frame to capture when using the Single Frame mode. First Frame Last Frame Specifies the range of frames to capture when in Frame Interval mode. Start End Specifies the time, in seconds, to begin and finish recording. Playback Specifies how to control the frame rate during recording. Constant Limit the recorder to a specific frame rate. Use the Target property to specify this rate. Variable Use the frame rate of the game. Specify the upper limit of the rate of the game during recording with the Max Frame Rate property. Note: The Movie Recorder does not support a variable frame rate. Target The frame rate to capture when using the Constant setting in Playback . The Unity Recorder captures at this rate regardless of whether the game is played at a higher or lower frame rate. For example, if Target is set to a custom value of 30 fps but the game plays at 60 fps, the recording is captured at 30 fps. Max Frame Rate Limit the rate of updates in Play Mode. This property is available when Playback is Variable . To prevent your game from exceeding this frame rate, the Unity Recorder inserts delays during game play. Use this property to reduce the size of the output. Cap Frame Rate Check this property when the frame rate of your game is faster than the Target frame rate. This property is available when Playback is Constant . Recorder properties These properties specify the file name and location to store the output from a recorder. These properties are available for all recorders. Some recorders, like the Animation Recorder , can only record inside the Assets folder. Tip: Click to reveal the output files in Windows Explorer/Mac OS Finder. Property: Function: File Name The name of the output file. Use the text field to specify the pattern to use for recording many files. Choose placeholders from the +Wildcards drop-down menu. +Wildcards The placeholder text to insert in File Name. The recorder replaces these placeholders when saving the output file. You may combine wildcards. Path The folder where output files are saved. Use the drop-down menu to choose a pre-defined Unity folder. Choose Absolute to specify a custom directory or click ... to navigate to a custom directory. Movie Recorder properties The Movie Recorder generates a video in MP4 or WebM format. It does not support variable frame rates. Property: Function: Format The encoding format of the output of the recorder. Choose MP4 or WEBM . Capture Alpha Check to include the alpha channel in the recording. Uncheck to only record the RGB channels. This property is only available when Format is WEBM . This property is not available when Capture is Game View . Capture The input for the recording. Game View Record the frames that are rendered in the Game View. Targeted Camera Record the frames captured by a specific camera, even if it is not used in the Game View. 360 View Record a 360-degree video. Use the Source camera as the point of view for the video. The recorder captures 360 degrees on the y-axis of the Source camera. Render Texture Asset Capture the frames that are rendered in a Render Texture. Texture Sampling When capturing, supersample the Source camera to generate anti-aliased images in the output. Use this capture method when the Rendering Resolution has the same or higher resolution than the Output Resolution . Render Texture The Render Texture asset to use as the source for frames. Available when Capture is set to Render Texture Asset . The output resolution of the recording is fixed to the resolution of the Rendure Texture. Super Sampling The size of the grid from which to sample. This property is available when Capture is Texture Sampling . Source The camera to use for recording. Choose Active Cameras , Main Camera , or Tagged Camera . The Main Camera option specifies the camera with the MainCamera tag. Available when Capture is set to Targeted Camera , 360 View , or Texture Sampling . Tag The tag of the camera to record. Available when Capture is set to Targeted Camera and Source is TaggedCamera . 360 View Output The width and height, in pixels, of the 360-degree video. This property is available when Capture is 360 View . Cube Map The dimension of the cube map, in pixels, for the 360-degree video. This property is available when Capture is 360 View . Stereo Check to generate both a left and right stereoscopic view for a 360-degree video. This property is available when Capture is 360 View . Stereo Separation The angle to separate the left and right views. This separation is along the y-axis of the Source camera. This property is available when Capture is 360 View . Rendering Resolution The dimensions of the input from which to sample. This property is available when Capture is Texture Sampling . Output Resolution The dimensions of the video recording. This property is available only for applicable Capture choices. Aspect Ratio The width:height ratio to format the output to. Flip Vertical Check to flip the images in the output to make it upside-down. Use this property to restore up and down when your system generates video that is flipped vertically. Capture Audio Check to include audio in the recording. Quality The quality of the output: Low , Medium , or High . The lower the quality, the smaller the size of the output file. Animation Recorder properties The Animation Recorder generates an animation clip in ANIM format. Property: Function: Game Object The GameObject to record. Recorded Target(s) The components of the GameObject to record. Choose more than one item to record more than one component. Record Hierarchy Check to record children of the Game Object too. Image Recorder Properties The Image Recorder generates a sequence of image files in JPEG, PNG, or OpenEXR format. Property: Function: Format The encoding format of the output of the recorder. Choose PNG , JPEG , or EXR (for OpenEXR). Capture Alpha Check to include the alpha channel in the recording. Uncheck to only record the RGB channels. This property is only available when Format is PNG or EXR . This property is not available when Capture is Game View . Capture The input for the recording. Game View Record the frames that are rendered in the Game View. Targeted Camera Record the frames captured by a specific camera, even if it is not used in the Game View. 360 View Record a 360-degree video. Use the Source as the point of view for the video. The recorder captures video 360 degrees on the y axis of the Source camera. Render Texture Asset Record the frames that are rendered in a Render Texture. Texture Sampling When capturing, supersample the Source camera generate anti-aliased images in the recording. Use this capture method when the Rendering Resolution has the same or higher resolution than the Output Resolution . Source The camera to use for recording. Choose Active Cameras , Main Camera , or Tagged Camera . The Main Camera option specifies the camera with the MainCamera tag. Available when Capture is set to Targeted Camera or Texture Sampling . Tag The tag of the camera to record. Available when Capture is set to Targeted Camera and Source is TaggedCamera . Output Resolution The dimensions of the video recording. This property is available only for applicable Capture choices. Include UI Check to include UI GameObjects in the recording. Flip Vertical Check to flip the images in the output to make it upside-down. Use this property to restore up and down when your system generates video that is flipped vertically. GIF Recorder properties The GIF Recorder generates an animated GIF file. Property: Function: Capture The input for the recording. Targeted Camera Record the frames captured by a specific camera, even if it is not used in the Game View. Render Texture Asset Record the frames that are rendered in a Render Texture. Texture Sampling When capturing, supersample the Source camera generate anti-aliased images in the recording. Use this capture method when the Rendering Resolution has the same or higher resolution than the Output Resolution . Source The camera to use for recording. Choose Active Cameras , Main Camera , or Tagged Camera . The Main Camera option specifies the camera with the MainCamera tag. Available when Capture is set to Targeted Camera or Texture Sampling . Tag The tag of the camera to record. Available when Capture is set to Targeted Camera and Source is TaggedCamera . Output Resolution The dimensions of the video recording. This property is available only for applicable Capture choices. Aspect Ratio The width:height ratio to format the output to. Include UI Check to include UI GameObjects in the recording. Flip Vertical Check to flip the images in the output to make it upside-down. Use this property to restore up and down when your system generates video that is flipped vertically. Encoding Properties for controlling the quality and size of the GIF output. Num Colors The number of colors to use in the GIF palette table. The maximum is 256 colors. Specify a smaller palette to reduce the size of the GIF file while reducing image quality. Keyframe Interval The number of frames that share the same color palette. Increase this number to reduce the size of the GIF file while reducing image quality. Max Tasks The number of frames to encode in parallel. Increasing this number may reduce the length of time Unity takes to encode the GIF."
  },
  "api/UnityEditor.Recorder.ImageAspect.html": {
    "href": "api/UnityEditor.Recorder.ImageAspect.html",
    "title": "Enum ImageAspect | Package Manager UI website",
    "keywords": "Enum ImageAspect Helper to describe a standard image aspect ratio. Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum ImageAspect Fields Name Description x16_10 x16_9 x19_10 x4_3 x5_4"
  },
  "api/UnityEditor.Recorder.Input.AnimationInputSettings.html": {
    "href": "api/UnityEditor.Recorder.Input.AnimationInputSettings.html",
    "title": "Class AnimationInputSettings | Package Manager UI website",
    "keywords": "Class AnimationInputSettings Regroups all the information required to record an Animation from a given gameObject. Inheritance System.Object RecorderInputSettings AnimationInputSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class AnimationInputSettings : RecorderInputSettings Fields recursive If true, all the gameObject hierarchy will be recorded. Declaration public bool recursive Field Value Type Description System.Boolean Properties gameObject The gameObject to record from. Declaration public GameObject gameObject { get; set; } Property Value Type Description GameObject Methods AddComponentToRecord(Type) Add a component to record from. Declaration public void AddComponentToRecord(Type componentType) Parameters Type Name Description Type componentType The type of the Component"
  },
  "api/UnityEditor.Recorder.RecorderController.html": {
    "href": "api/UnityEditor.Recorder.RecorderController.html",
    "title": "Class RecorderController | Package Manager UI website",
    "keywords": "Class RecorderController Main class to use the Recorder framework via script. Controls recording states like start and stop. Inheritance System.Object RecorderController Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class RecorderController Constructors RecorderController(RecorderControllerSettings) A RecorderController requires a RecorderControllerSettings. Declaration public RecorderController(RecorderControllerSettings settings) Parameters Type Name Description RecorderControllerSettings settings The RecorderControllerSettings to be used by this RecorderController. Fields verbose If true, prints debug information into the Console. Declaration public bool verbose Field Value Type Description System.Boolean Properties settings Current settings used by this RecorderControler. Declaration public RecorderControllerSettings settings { get; } Property Value Type Description RecorderControllerSettings Methods IsRecording() Use this method to know if all recorders are done recording. A recording stops: The settings is set to a time (or frame) interval and the end time (or last frame) was reached. Calling the StopRecording method. Exiting Playmode. Declaration public bool IsRecording() Returns Type Description System.Boolean True if at least one recording is still active. false otherwise. See Also SetRecordModeToSingleFrame(Int32) SetRecordModeToFrameInterval(Int32, Int32) SetRecordModeToTimeInterval(Single, Single) StartRecording() Start recording. Works only in Playmode. Declaration public bool StartRecording() Returns Type Description System.Boolean StopRecording() Stops all active recordings. Most recordings will create the recorded file once stopped. If the settings is using Manual recording mode. then the only way to stop recording is by calling this method or by exiting Playmode. Declaration public void StopRecording() See Also SetRecordModeToManual()"
  },
  "api/UnityEditor.Recorder.Timeline.html": {
    "href": "api/UnityEditor.Recorder.Timeline.html",
    "title": "Namespace UnityEditor.Recorder.Timeline | Package Manager UI website",
    "keywords": "Namespace UnityEditor.Recorder.Timeline Classes RecorderClip RecorderTrack"
  },
  "api/UnityEditor.Recorder.ImageRecorderSettings.html": {
    "href": "api/UnityEditor.Recorder.ImageRecorderSettings.html",
    "title": "Class ImageRecorderSettings | Package Manager UI website",
    "keywords": "Class ImageRecorderSettings Inheritance System.Object RecorderSettings ImageRecorderSettings Inherited Members RecorderSettings.outputFile RecorderSettings.enabled RecorderSettings.take RecorderSettings.isPlatformSupported RecorderSettings.OnAfterDuplicate() Namespace : UnityEditor.Recorder <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class ImageRecorderSettings : RecorderSettings Constructors ImageRecorderSettings() Declaration public ImageRecorderSettings() Fields captureAlpha Declaration public bool captureAlpha Field Value Type Description System.Boolean outputFormat Declaration public ImageRecorderOutputFormat outputFormat Field Value Type Description ImageRecorderOutputFormat Properties extension Declaration public override string extension { get; } Property Value Type Description System.String Overrides RecorderSettings.extension imageInputSettings Declaration public ImageInputSettings imageInputSettings { get; set; } Property Value Type Description ImageInputSettings inputsSettings Declaration public override IEnumerable<RecorderInputSettings> inputsSettings { get; } Property Value Type Description IEnumerable < RecorderInputSettings > Overrides RecorderSettings.inputsSettings Methods SelfAdjustSettings() Declaration public override void SelfAdjustSettings() Overrides RecorderSettings.SelfAdjustSettings()"
  },
  "api/UnityEditor.Recorder.Input.ImageInputSettings.html": {
    "href": "api/UnityEditor.Recorder.Input.ImageInputSettings.html",
    "title": "Class ImageInputSettings | Package Manager UI website",
    "keywords": "Class ImageInputSettings Optional base class for Image related inputs. Inheritance System.Object RecorderInputSettings ImageInputSettings RenderTextureInputSettings StandardImageInputSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UnityEditor.Recorder.Input <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public abstract class ImageInputSettings : RecorderInputSettings Fields allowTransparency Declaration public bool allowTransparency Field Value Type Description System.Boolean Properties resolution Declaration public abstract Vector2 resolution { get; } Property Value Type Description Vector2 supportsTransparent Declaration public virtual bool supportsTransparent { get; } Property Value Type Description System.Boolean"
  }
}